<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\synth1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\synth1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Fri Jul 19 13:20:08 2019
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Clocks::SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a6]">__user_initial_stackheap</a>
 <LI><a href="#[130]">unw_getcontext</a>
 <LI><a href="#[178]">libunwind::Registers_arm::saveVFPWithFSTMD(void*)</a>
 <LI><a href="#[176]">libunwind::Registers_arm::saveVFPWithFSTMX(void*)</a>
 <LI><a href="#[177]">libunwind::Registers_arm::saveVFPv3(void*)</a>
 <LI><a href="#[17e]">libunwind::Registers_arm::restoreCoreAndJumpTo()</a>
 <LI><a href="#[180]">libunwind::Registers_arm::restoreVFPWithFLDMD(void*)</a>
 <LI><a href="#[17f]">libunwind::Registers_arm::restoreVFPWithFLDMX(void*)</a>
 <LI><a href="#[181]">libunwind::Registers_arm::restoreVFPv3(void*)</a>
 <LI><a href="#[1f6]">_Unwind_Complete</a>
 <LI><a href="#[1aa]">_Unwind_DeleteException</a>
 <LI><a href="#[12c]">_Unwind_GetLanguageSpecificData</a>
 <LI><a href="#[12e]">_Unwind_GetRegionStart</a>
 <LI><a href="#[12f]">_Unwind_RaiseException</a>
 <LI><a href="#[133]">_Unwind_Resume</a>
 <LI><a href="#[134]">_Unwind_VRS_Get</a>
 <LI><a href="#[138]">_Unwind_VRS_Interpret</a>
 <LI><a href="#[139]">_Unwind_VRS_Pop</a>
 <LI><a href="#[13b]">_Unwind_VRS_Set</a>
 <LI><a href="#[13e]">__cxxabiv1::__enum_type_info::~__enum_type_info()</a>
 <LI><a href="#[1f9]">__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</a>
 <LI><a href="#[1fa]">__cxxabiv1::__shim_type_info::~__shim_type_info()</a>
 <LI><a href="#[80]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a>
 <LI><a href="#[1fb]">__cxxabiv1::__array_type_info::~__array_type_info()</a>
 <LI><a href="#[1fc]">__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</a>
 <LI><a href="#[1fd]">__cxxabiv1::__class_type_info::~__class_type_info()</a>
 <LI><a href="#[1fe]">__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</a>
 <LI><a href="#[1ff]">__cxxabiv1::__pbase_type_info::~__pbase_type_info()</a>
 <LI><a href="#[200]">__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</a>
 <LI><a href="#[201]">__cxxabiv1::__pointer_type_info::~__pointer_type_info()</a>
 <LI><a href="#[202]">__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</a>
 <LI><a href="#[203]">__cxxabiv1::__function_type_info::~__function_type_info()</a>
 <LI><a href="#[204]">__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</a>
 <LI><a href="#[205]">__cxxabiv1::__si_class_type_info::~__si_class_type_info()</a>
 <LI><a href="#[206]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</a>
 <LI><a href="#[207]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</a>
 <LI><a href="#[208]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</a>
 <LI><a href="#[209]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</a>
 <LI><a href="#[20a]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</a>
 <LI><a href="#[20b]">__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</a>
 <LI><a href="#[20c]">__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</a>
 <LI><a href="#[81]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a>
 <LI><a href="#[141]">__cxxabiv1::__free_with_fallback(void*)</a>
 <LI><a href="#[88]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a>
 <LI><a href="#[192]">__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)</a>
 <LI><a href="#[143]">__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)</a>
 <LI><a href="#[8c]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</a>
 <LI><a href="#[145]">__cxxabiv1::__aligned_free_with_fallback(void*)</a>
 <LI><a href="#[146]">__cxxabiv1::__aligned_malloc_with_fallback(unsigned)</a>
 <LI><a href="#[9d]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</a>
 <LI><a href="#[94]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</a>
 <LI><a href="#[95]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</a>
 <LI><a href="#[99]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</a>
 <LI><a href="#[179]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()</a>
 <LI><a href="#[93]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</a>
 <LI><a href="#[9a]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</a>
 <LI><a href="#[9c]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</a>
 <LI><a href="#[17c]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)</a>
 <LI><a href="#[9b]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</a>
 <LI><a href="#[96]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</a>
 <LI><a href="#[91]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</a>
 <LI><a href="#[98]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</a>
 <LI><a href="#[92]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</a>
 <LI><a href="#[97]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</a>
 <LI><a href="#[90]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</a>
 <LI><a href="#[8f]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</a>
 <LI><a href="#[17b]">libunwind::Registers_arm::getRegisterName(int)</a>
 <LI><a href="#[17d]">libunwind::Registers_arm::restoreSavedFloatRegisters()</a>
 <LI><a href="#[8e]">libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</a>
 <LI><a href="#[82]">__cxxabiv1::__shim_type_info::noop1() const</a>
 <LI><a href="#[83]">__cxxabiv1::__shim_type_info::noop2() const</a>
 <LI><a href="#[85]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[86]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a>
 <LI><a href="#[87]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a>
 <LI><a href="#[183]">__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</a>
 <LI><a href="#[84]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[185]">__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[186]">__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</a>
 <LI><a href="#[188]">__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[89]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[8a]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a>
 <LI><a href="#[8b]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a>
 <LI><a href="#[189]">__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[8d]">__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[187]">__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</a>
 <LI><a href="#[18a]">__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[a0]">std::bad_exception::what() const</a>
 <LI><a href="#[a2]">std::bad_array_new_length::what() const</a>
 <LI><a href="#[a4]">std::bad_alloc::what() const</a>
 <LI><a href="#[9f]">std::bad_exception::~bad_exception__deallocating()</a>
 <LI><a href="#[21d]">std::bad_array_new_length::bad_array_new_length()</a>
 <LI><a href="#[21e]">std::bad_array_new_length::bad_array_new_length__sub_object()</a>
 <LI><a href="#[a1]">std::bad_array_new_length::~bad_array_new_length__deallocating()</a>
 <LI><a href="#[19f]">std::bad_alloc::bad_alloc()</a>
 <LI><a href="#[21f]">std::bad_alloc::bad_alloc__sub_object()</a>
 <LI><a href="#[a3]">std::bad_alloc::~bad_alloc__deallocating()</a>
 <LI><a href="#[70]">std::bad_exception::~bad_exception()</a>
 <LI><a href="#[220]">std::bad_exception::~bad_exception__sub_object()</a>
 <LI><a href="#[221]">std::bad_array_new_length::~bad_array_new_length()</a>
 <LI><a href="#[222]">std::bad_array_new_length::~bad_array_new_length__sub_object()</a>
 <LI><a href="#[6f]">std::bad_alloc::~bad_alloc()</a>
 <LI><a href="#[223]">std::bad_alloc::~bad_alloc__sub_object()</a>
 <LI><a href="#[224]">std::exception::~exception()</a>
 <LI><a href="#[9e]">std::exception::~exception__sub_object()</a>
 <LI><a href="#[225]">std::type_info::~type_info()</a>
 <LI><a href="#[13f]">std::type_info::~type_info__sub_object()</a>
 <LI><a href="#[18c]">std::unexpected()</a>
 <LI><a href="#[14e]">std::__terminate(void(*)())</a>
 <LI><a href="#[18d]">std::__unexpected(void(*)())</a>
 <LI><a href="#[1a7]">std::get_terminate()</a>
 <LI><a href="#[226]">std::set_terminate(void(*)())</a>
 <LI><a href="#[1a8]">std::get_unexpected()</a>
 <LI><a href="#[227]">std::set_unexpected(void(*)())</a>
 <LI><a href="#[19d]">std::get_new_handler()</a>
 <LI><a href="#[228]">std::set_new_handler(void(*)())</a>
 <LI><a href="#[6e]">std::terminate()</a>
 <LI><a href="#[193]">operator delete[] (void*)</a>
 <LI><a href="#[194]">operator delete[] (void*, const std::nothrow_t&)</a>
 <LI><a href="#[195]">operator delete[] (void*, unsigned)</a>
 <LI><a href="#[140]">operator delete (void*)</a>
 <LI><a href="#[196]">operator delete (void*, const std::nothrow_t&)</a>
 <LI><a href="#[197]">operator delete (void*, unsigned)</a>
 <LI><a href="#[169]">operator new[] (unsigned)</a>
 <LI><a href="#[199]">operator new[] (unsigned, const std::nothrow_t&)</a>
 <LI><a href="#[19a]">operator new[] (unsigned, std::align_val_t)</a>
 <LI><a href="#[19c]">operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)</a>
 <LI><a href="#[198]">operator new(unsigned)</a>
 <LI><a href="#[1a1]">operator new(unsigned, const std::nothrow_t&)</a>
 <LI><a href="#[19b]">operator new(unsigned, std::align_val_t)</a>
 <LI><a href="#[1a2]">operator new(unsigned, std::align_val_t, const std::nothrow_t&)</a>
 <LI><a href="#[6a]">__aeabi_unwind_cpp_pr0</a>
 <LI><a href="#[6b]">__aeabi_unwind_cpp_pr1</a>
 <LI><a href="#[6c]">__aeabi_unwind_cpp_pr2</a>
 <LI><a href="#[190]">__clang_call_terminate</a>
 <LI><a href="#[1a3]">__cxa_allocate_dependent_exception</a>
 <LI><a href="#[19e]">__cxa_allocate_exception</a>
 <LI><a href="#[14d]">__cxa_begin_catch</a>
 <LI><a href="#[1a6]">__cxa_begin_cleanup</a>
 <LI><a href="#[1a4]">__cxa_call_unexpected</a>
 <LI><a href="#[150]">__cxa_decrement_exception_refcount</a>
 <LI><a href="#[18f]">__cxa_end_catch</a>
 <LI><a href="#[1a5]">__cxa_get_globals</a>
 <LI><a href="#[191]">__cxa_get_globals_fast</a>
 <LI><a href="#[79]">__cxa_pure_virtual</a>
 <LI><a href="#[1a9]">__cxa_rethrow</a>
 <LI><a href="#[1ab]">__cxa_rethrow_primary_exception</a>
 <LI><a href="#[1a0]">__cxa_throw</a>
 <LI><a href="#[184]">__dynamic_cast</a>
 <LI><a href="#[1ac]">__gnu_unwind_frame</a>
 <LI><a href="#[73]">__gxx_personality_v0</a>
 <LI><a href="#[18e]">abort_message</a>
 <LI><a href="#[17a]">decode_eht_entry</a>
 <LI><a href="#[137]">unw_get_fpreg</a>
 <LI><a href="#[12d]">unw_get_proc_info</a>
 <LI><a href="#[135]">unw_get_reg</a>
 <LI><a href="#[131]">unw_init_local</a>
 <LI><a href="#[13d]">unw_resume</a>
 <LI><a href="#[136]">unw_save_vfp_as_X</a>
 <LI><a href="#[13c]">unw_set_fpreg</a>
 <LI><a href="#[13a]">unw_set_reg</a>
 <LI><a href="#[155]">unw_step</a>
 <LI><a href="#[14c]">_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</a>
 <LI><a href="#[72]">_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a>
 <LI><a href="#[71]">_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a>
 <LI><a href="#[a5]">__cxa_end_cleanup_impl</a>
 <LI><a href="#[147]">_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context</a>
 <LI><a href="#[14f]">_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE</a>
 <LI><a href="#[14a]">_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</a>
 <LI><a href="#[149]">_ZN10__cxxabiv1L18readEncodedPointerEPPKhh</a>
 <LI><a href="#[14b]">_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block</a>
 <LI><a href="#[132]">_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb</a>
 <LI><a href="#[154]">&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)</a>
 <LI><a href="#[142]">&lang;unnamed namespace 1&rang;::fallback_free(void*)</a>
 <LI><a href="#[144]">&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1a4]">__cxa_call_unexpected</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14d]">__cxa_begin_catch</a><BR>
 <LI><a href="#[14a]">_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14d]">__cxa_begin_catch</a><BR>
 <LI><a href="#[1a9]">__cxa_rethrow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14d]">__cxa_begin_catch</a><BR>
 <LI><a href="#[190]">__clang_call_terminate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14d]">__cxa_begin_catch</a><BR>
 <LI><a href="#[14c]">_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14d]">__cxa_begin_catch</a><BR>
 <LI><a href="#[150]">__cxa_decrement_exception_refcount</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">__cxa_call_unexpected</a><BR>
 <LI><a href="#[19e]">__cxa_allocate_exception</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">__cxa_call_unexpected</a><BR>
 <LI><a href="#[14d]">__cxa_begin_catch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">std::terminate()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[48]">CAN2_RX0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[49]">CAN2_RX1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4a]">CAN2_SCE_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[47]">CAN2_TX_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5c]">CEC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[56]">DCMI_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream6_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream7_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[57]">FPU_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[69]">HAL_RCC_GetPCLK1Freq</a> from stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq) referenced from stm32f4xx_hal_uart.o(.text.UART_SetConfig)
 <LI><a href="#[68]">HAL_RCC_GetPCLK2Freq</a> from stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq) referenced from stm32f4xx_hal_uart.o(.text.UART_SetConfig)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[51]">I2C3_ER_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[50]">I2C3_EV_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5f]">I2C4_Error_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5e]">I2C4_Event_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4b]">OTG_FS_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5b]">QUADSPI_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[59]">SAI1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5a]">SAI2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5d]">SPDIF_RX_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from irq.o(.text.SysTick_Handler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f446xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from irq.o(.text.TIM2_IRQHandler) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[64]">TIMEx_DMACommutationCplt</a> from stm32f4xx_hal_tim_ex.o(.text.TIMEx_DMACommutationCplt) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
 <LI><a href="#[67]">TIM_DMACaptureCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMACaptureCplt) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Start_DMA)
 <LI><a href="#[67]">TIM_DMACaptureCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMACaptureCplt) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Start_DMA)
 <LI><a href="#[65]">TIM_DMADelayPulseCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMADelayPulseCplt) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
 <LI><a href="#[65]">TIM_DMADelayPulseCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMADelayPulseCplt) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Start_DMA)
 <LI><a href="#[65]">TIM_DMADelayPulseCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMADelayPulseCplt) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
 <LI><a href="#[63]">TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text.TIM_DMAError) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
 <LI><a href="#[63]">TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text.TIM_DMAError) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Start_DMA)
 <LI><a href="#[63]">TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text.TIM_DMAError) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Start_DMA)
 <LI><a href="#[63]">TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text.TIM_DMAError) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Start_DMA)
 <LI><a href="#[63]">TIM_DMAError</a> from stm32f4xx_hal_tim.o(.text.TIM_DMAError) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
 <LI><a href="#[66]">TIM_DMAPeriodElapsedCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMAPeriodElapsedCplt) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
 <LI><a href="#[62]">TIM_DMATriggerCplt</a> from stm32f4xx_hal_tim.o(.text.TIM_DMATriggerCplt) referenced from stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[4f]">USART6_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f446xx.o(.text) referenced from startup_stm32f446xx.o(RESET)
 <LI><a href="#[80]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[80]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[80]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[81]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[88]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8c]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv123__fundamental_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[72]">_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a> from cxa_exception.cpp.o(.text._ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block) referenced 2 times from cxa_exception.cpp.o(.text.__cxa_throw)
 <LI><a href="#[71]">_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a> from cxa_exception.cpp.o(.text._ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block) referenced 2 times from cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception)
 <LI><a href="#[74]">Sine::fill_memory()</a> from wave_1.o(.text._ZN4Sine11fill_memoryEv) referenced from wave_1.o(.rodata._ZTV4Sine)
 <LI><a href="#[77]">Sine::~Sine__deallocating()</a> from wave_1.o(.text._ZN4SineD0Ev) referenced from wave_1.o(.rodata._ZTV4Sine)
 <LI><a href="#[76]">Wave::~Wave__sub_object()</a> from wave_1.o(.text._ZN4WaveD2Ev) referenced from wave_1.o(.rodata._ZTV4Sine)
 <LI><a href="#[76]">Wave::~Wave__sub_object()</a> from wave_1.o(.text._ZN4WaveD2Ev) referenced from wave_1.o(.rodata._ZTV5Noise)
 <LI><a href="#[76]">Wave::~Wave__sub_object()</a> from wave_1.o(.text._ZN4WaveD2Ev) referenced from wave_1.o(.rodata._ZTV6Square)
 <LI><a href="#[7a]">Noise::fill_memory()</a> from wave_1.o(.text._ZN5Noise11fill_memoryEv) referenced from wave_1.o(.rodata._ZTV5Noise)
 <LI><a href="#[7b]">Noise::~Noise__deallocating()</a> from wave_1.o(.text._ZN5NoiseD0Ev) referenced from wave_1.o(.rodata._ZTV5Noise)
 <LI><a href="#[7d]">Square::fill_memory()</a> from wave_1.o(.text._ZN6Square11fill_memoryEv) referenced from wave_1.o(.rodata._ZTV6Square)
 <LI><a href="#[7e]">Square::~Square__deallocating()</a> from wave_1.o(.text._ZN6SquareD0Ev) referenced from wave_1.o(.rodata._ZTV6Square)
 <LI><a href="#[9d]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE10saveVFPAsXEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[94]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11getFloatRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[95]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11setFloatRegEiy) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[99]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13isSignalFrameEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[93]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13validFloatRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9a]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getFunctionNameEPcjPj) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9c]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getRegisterNameEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[9b]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE24setInfoBasedOnIPRegisterEb) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[96]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE4stepEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[91]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6getRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[98]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6jumptoEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[92]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6setRegEij) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[97]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE7getInfoEP15unw_proc_info_t) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[90]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE8validRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[8f]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEED0Ev) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[8e]">libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</a> from libunwind.cpp.o(.text._ZN9libunwind20AbstractUnwindCursorD2Ev) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[82]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[82]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[82]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[83]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[83]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[83]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[85]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[86]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[87]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[84]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[84]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[89]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8a]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8b]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[8d]">__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[78]">Sine::get_value(float) const</a> from wave_1.o(.text._ZNK4Sine9get_valueEf) referenced from wave_1.o(.rodata._ZTV4Sine)
 <LI><a href="#[75]">Wave::get_value_wptr(float*, float) const</a> from wave_1.o(.text._ZNK4Wave14get_value_wptrEPff) referenced from wave_1.o(.rodata._ZTV4Sine)
 <LI><a href="#[75]">Wave::get_value_wptr(float*, float) const</a> from wave_1.o(.text._ZNK4Wave14get_value_wptrEPff) referenced from wave_1.o(.rodata._ZTV4Wave)
 <LI><a href="#[75]">Wave::get_value_wptr(float*, float) const</a> from wave_1.o(.text._ZNK4Wave14get_value_wptrEPff) referenced from wave_1.o(.rodata._ZTV5Noise)
 <LI><a href="#[75]">Wave::get_value_wptr(float*, float) const</a> from wave_1.o(.text._ZNK4Wave14get_value_wptrEPff) referenced from wave_1.o(.rodata._ZTV6Square)
 <LI><a href="#[7c]">Noise::get_value(float) const</a> from wave_1.o(.text._ZNK5Noise9get_valueEf) referenced from wave_1.o(.rodata._ZTV5Noise)
 <LI><a href="#[7f]">Square::get_value(float) const</a> from wave_1.o(.text._ZNK6Square9get_valueEf) referenced from wave_1.o(.rodata._ZTV6Square)
 <LI><a href="#[a0]">std::bad_exception::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt13bad_exception4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[a2]">std::bad_array_new_length::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt20bad_array_new_length4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[a4]">std::bad_alloc::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt9bad_alloc4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[9f]">std::bad_exception::~bad_exception__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt13bad_exceptionD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[70]">std::bad_exception::~bad_exception()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced 2 times from cxa_personality.cpp.o(.text.__cxa_call_unexpected)
 <LI><a href="#[a1]">std::bad_array_new_length::~bad_array_new_length__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[a3]">std::bad_alloc::~bad_alloc__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt9bad_allocD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[6f]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced 2 times from new.cpp.o(.text._Znwj)
 <LI><a href="#[6f]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced 2 times from new.cpp.o(.text._ZnwjSt11align_val_t)
 <LI><a href="#[9e]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[9e]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[9e]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[6e]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced from cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
 <LI><a href="#[6e]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced 2 times from cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE)
 <LI><a href="#[6a]">__aeabi_unwind_cpp_pr0</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr0) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[6b]">__aeabi_unwind_cpp_pr1</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr1) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[6c]">__aeabi_unwind_cpp_pr2</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr2) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[79]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 4 times from wave_1.o(.rodata._ZTV4Wave)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from wave_1.o(.ARM.extab.text._ZN4Wave7set_ptrERPf)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_handlers.cpp.o(.ARM.extab.text._ZSt11__terminatePFvvE)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_handlers.cpp.o(.ARM.extab.text._ZSt9terminatev)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnajRKSt9nothrow_t)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnajSt11align_val_tRKSt9nothrow_t)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnwjRKSt9nothrow_t)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from new.cpp.o(.ARM.extab.text._ZnwjSt11align_val_tRKSt9nothrow_t)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_allocate_exception)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_catch)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_cleanup)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_personality.cpp.o(.ARM.extab.text.__cxa_call_unexpected)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_decrement_exception_refcount)
 <LI><a href="#[73]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from main_1.o(.ARM.extab.text.main)
 <LI><a href="#[61]">__main</a> from __main.o(!!!main) referenced from startup_stm32f446xx.o(.text)
 <LI><a href="#[6d]">abort</a> from abort.o(.text) referenced from cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
 <LI><a href="#[6d]">abort</a> from abort.o(.text) referenced 2 times from cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ba]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1bb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ab]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ad]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[af]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[1be]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1d1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1d2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1d3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1d4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1d5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1d6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b1]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b3]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b5]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Clocks::SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b8]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1da]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ba]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[18b]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise::get_value(float) const
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C4_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C4_Event_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f446xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[1db]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[b0]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::HAL_DAC_MspInit(DAC_HandleTypeDef*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::Filter(float, float)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clocks::SystemClock_Config()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1dd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[c0]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__free_with_fallback(void*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[c1]"></a>posix_memalign</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, h1_memalign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
</UL>

<P><STRONG><a name="[c2]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[c4]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[6d]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE)
<LI> cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
</UL>
<P><STRONG><a name="[cd]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
</UL>

<P><STRONG><a name="[c6]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1e0]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>unw_getcontext</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[178]"></a>libunwind::Registers_arm::saveVFPWithFSTMD(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[176]"></a>libunwind::Registers_arm::saveVFPWithFSTMX(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[177]"></a>libunwind::Registers_arm::saveVFPv3(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[bb]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[be]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1e1]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c9]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ae]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[cc]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
</UL>

<P><STRONG><a name="[cb]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1e7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
</UL>

<P><STRONG><a name="[d0]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>libunwind::Registers_arm::restoreCoreAndJumpTo()</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()
</UL>

<P><STRONG><a name="[180]"></a>libunwind::Registers_arm::restoreVFPWithFLDMD(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[17f]"></a>libunwind::Registers_arm::restoreVFPWithFLDMX(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[181]"></a>libunwind::Registers_arm::restoreVFPv3(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[1ec]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ed]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c8]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1f1]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cf]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ce]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[ca]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[182]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[d4]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[d5]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d6]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[15e]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::Dac(unsigned)
</UL>

<P><STRONG><a name="[d7]"></a>HAL_DAC_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::Dac(unsigned)
</UL>

<P><STRONG><a name="[d8]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_DAC_SetValue</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::set_value(unsigned)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::high()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::low()
</UL>

<P><STRONG><a name="[15f]"></a>HAL_DAC_Start</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f4xx_hal_dac.o(.text.HAL_DAC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::Dac(unsigned)
</UL>

<P><STRONG><a name="[d9]"></a>HAL_DMA_Start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[db]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_WriteStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_DMABurst_ReadStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_DMA
</UL>

<P><STRONG><a name="[dc]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[152]"></a>HAL_GPIO_Init</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::HAL_DAC_MspInit(DAC_HandleTypeDef*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_1::init()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_2_vcom::init()
</UL>

<P><STRONG><a name="[dd]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_GetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTickFreq), UNUSED)

<P><STRONG><a name="[1f3]"></a>HAL_GetTickPrio</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTickPrio), UNUSED)

<P><STRONG><a name="[de]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_HalfDuplex_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[129]"></a>HAL_IncTick</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::init()
</UL>

<P><STRONG><a name="[e3]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
</UL>

<P><STRONG><a name="[e7]"></a>HAL_LIN_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_LIN_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e4]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_MultiProcessor_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[163]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim::HAL_TIM_Base_MspInit(TIM_HandleTypeDef*)
</UL>

<P><STRONG><a name="[e6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim::HAL_TIM_Base_MspInit(TIM_HandleTypeDef*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e2]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::HAL_MspInit()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ea]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clocks::SystemClock_Config()
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clocks::SystemClock_Config()
</UL>

<P><STRONG><a name="[69]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.UART_SetConfig)
</UL>
<P><STRONG><a name="[68]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.UART_SetConfig)
</UL>
<P><STRONG><a name="[ec]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc_ex.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 764 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clocks::SystemClock_Config()
</UL>

<P><STRONG><a name="[e5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ef]"></a>HAL_SetTickFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_SetTickFreq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMEx_DMACommutationCplt
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_TIMEx_ConfigCommutationEvent_DMA</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_ConfigCommutationEvent_DMA), UNUSED)

<P><STRONG><a name="[f0]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim::init()
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_Base_Start_DMA</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[165]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim::init()
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIM_DMABurst_ReadStart</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_ReadStart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIM_DMABurst_WriteStart</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_MspInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_Encoder_Start_DMA</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Start_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[fb]"></a>HAL_TIM_Encoder_Start_IT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Start_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_Encoder_Stop</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Stop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_Encoder_Stop_DMA</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Stop_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIM_Encoder_Stop_IT</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Stop_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIM_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAError
</UL>

<P><STRONG><a name="[109]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACaptureCplt
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
</UL>

<P><STRONG><a name="[100]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_MspInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_TIM_IC_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIM_IC_Start_DMA</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Start_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Start_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIM_IC_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Stop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_IC_Stop_DMA</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Stop_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[106]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Stop_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler_cpp()
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_MspInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIM_OC_Start_DMA</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Start_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[113]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Start_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[114]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Stop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[115]"></a>HAL_TIM_OC_Stop_DMA</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Stop_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[116]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Stop_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[117]"></a>HAL_TIM_OnePulse_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OnePulse_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_MspInit
</UL>

<P><STRONG><a name="[118]"></a>HAL_TIM_OnePulse_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OnePulse_MspInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIM_OnePulse_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OnePulse_Start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIM_OnePulse_Start_IT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OnePulse_Start_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIM_OnePulse_Stop</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OnePulse_Stop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIM_OnePulse_Stop_IT</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OnePulse_Stop_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[11d]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_MspInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseCplt
</UL>

<P><STRONG><a name="[11f]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[120]"></a>HAL_TIM_PWM_Start_DMA</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[121]"></a>HAL_TIM_PWM_Start_IT</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[122]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Stop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIM_PWM_Stop_DMA</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Stop_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_PWM_Stop_IT</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Stop_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>

<P><STRONG><a name="[10a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAPeriodElapsedCplt
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMATriggerCplt
</UL>

<P><STRONG><a name="[125]"></a>HAL_UART_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_1::init()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_2_vcom::init()
</UL>

<P><STRONG><a name="[df]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_UART_Receive</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_1::receive(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[128]"></a>HAL_UART_Transmit</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_2_vcom::transmit(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, irq.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1f5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemCoreClockUpdate), UNUSED)

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, irq.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler &rArr; TIM2_IRQHandler_cpp() &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler_cpp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIMEx_DMACommutationCplt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.TIMEx_DMACommutationCplt))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
</UL>
<P><STRONG><a name="[f2]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[f9]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_CCxChannelCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_IT
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop_DMA
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_IT
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop_IT
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Stop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start_IT
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OnePulse_Start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_DMA
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_DMA
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_DMA
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_DMA
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_IT
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop_DMA
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_IT
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start_DMA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
</UL>

<P><STRONG><a name="[67]"></a>TIM_DMACaptureCplt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_DMACaptureCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMACaptureCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Start_DMA)
<LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Start_DMA)
</UL>
<P><STRONG><a name="[65]"></a>TIM_DMADelayPulseCplt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_DMADelayPulseCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMADelayPulseCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Start_DMA)
<LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
<LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
</UL>
<P><STRONG><a name="[63]"></a>TIM_DMAError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 5]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_Start_DMA)
<LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start_DMA)
<LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_Start_DMA)
<LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_Encoder_Start_DMA)
<LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
</UL>
<P><STRONG><a name="[1f6]"></a>_Unwind_Complete</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_Complete), UNUSED)

<P><STRONG><a name="[1aa]"></a>_Unwind_DeleteException</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_DeleteException))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[12c]"></a>_Unwind_GetLanguageSpecificData</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_GetLanguageSpecificData))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[12e]"></a>_Unwind_GetRegionStart</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_GetRegionStart))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[12f]"></a>_Unwind_RaiseException</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_RaiseException))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_RaiseException &rArr; unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_getcontext
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[133]"></a>_Unwind_Resume</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_Resume &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_getcontext
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[134]"></a>_Unwind_VRS_Get</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Get &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_save_vfp_as_X
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_fpreg
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[138]"></a>_Unwind_VRS_Interpret</STRONG> (Thumb, 554 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>

<P><STRONG><a name="[139]"></a>_Unwind_VRS_Pop</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Pop &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
</UL>

<P><STRONG><a name="[13b]"></a>_Unwind_VRS_Set</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_fpreg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_save_vfp_as_X
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
</UL>

<P><STRONG><a name="[12a]"></a>TIM2_IRQHandler_cpp()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, irq.o(.text._Z19TIM2_IRQHandler_cppv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler_cpp() &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>Parameters::Parameters(const Parameters&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, parameters.o(.text._ZN10ParametersC2ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice::Voice(float, const Parameters&, unsigned, const float&)
</UL>

<P><STRONG><a name="[1f7]"></a>Parameters::Parameters__sub_object(const Parameters&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, parameters.o(.text._ZN10ParametersC2ERKS_), UNUSED)

<P><STRONG><a name="[1ad]"></a>Parameters::Parameters()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, parameters.o(.text._ZN10ParametersC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>Parameters::Parameters__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, parameters.o(.text._ZN10ParametersC2Ev), UNUSED)

<P><STRONG><a name="[13e]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::~type_info__sub_object()
</UL>

<P><STRONG><a name="[1f9]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[1fa]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[80]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1fb]"></a>__cxxabiv1::__array_type_info::~__array_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[1fc]"></a>__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[1fd]"></a>__cxxabiv1::__class_type_info::~__class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[1fe]"></a>__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[1ff]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[200]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[201]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[202]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[203]"></a>__cxxabiv1::__function_type_info::~__function_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[204]"></a>__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[205]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[206]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[207]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[208]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[209]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[20a]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[20b]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[20c]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[81]"></a>__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::~__class_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[141]"></a>__cxxabiv1::__free_with_fallback(void*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv120__free_with_fallbackEPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_free(void*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[88]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[192]"></a>__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv121__isOurExceptionClassEPK21_Unwind_Control_Block))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[143]"></a>__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv122__calloc_with_fallbackEjj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8c]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv123__fundamental_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
</UL>
<P><STRONG><a name="[145]"></a>__cxxabiv1::__aligned_free_with_fallback(void*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv128__aligned_free_with_fallbackEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__aligned_free_with_fallback(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_free(void*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[146]"></a>__cxxabiv1::__aligned_malloc_with_fallback(unsigned)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv130__aligned_malloc_with_fallbackEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__aligned_malloc_with_fallback(unsigned) &rArr; posix_memalign &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[151]"></a>Usart_2_vcom::init()</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, usart2_vcom.o(.text._ZN12Usart_2_vcom4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Usart_2_vcom::init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tests::uart_fast()
</UL>

<P><STRONG><a name="[153]"></a>Usart_2_vcom::transmit(unsigned char*, unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart2_vcom.o(.text._ZN12Usart_2_vcom8transmitEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Usart_2_vcom::transmit(unsigned char*, unsigned short) &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tests::uart_fast()
</UL>

<P><STRONG><a name="[156]"></a>Dac::set_value_rel(float)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dac.o(.text._ZN3Dac13set_value_relEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dac::set_value_rel(float) &rArr; Dac::set_value(unsigned) &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::set_value(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>Dac::HAL_DAC_MspInit(DAC_HandleTypeDef*)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, dac.o(.text._ZN3Dac15HAL_DAC_MspInitEP17DAC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Dac::HAL_DAC_MspInit(DAC_HandleTypeDef*) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::Dac(unsigned)
</UL>

<P><STRONG><a name="[15a]"></a>Dac::low()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dac.o(.text._ZN3Dac3lowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dac::low() &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>Dac::high()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dac.o(.text._ZN3Dac4highEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dac::high() &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>Dac::set_value(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dac.o(.text._ZN3Dac9set_valueEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dac::set_value(unsigned) &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::set_value_rel(float)
</UL>

<P><STRONG><a name="[15d]"></a>Dac::Dac(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dac.o(.text._ZN3DacC2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Dac::Dac(unsigned) &rArr; Dac::HAL_DAC_MspInit(DAC_HandleTypeDef*) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::HAL_DAC_MspInit(DAC_HandleTypeDef*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>Dac::Dac__sub_object(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dac.o(.text._ZN3DacC2Ej), UNUSED)

<P><STRONG><a name="[160]"></a>Hal::HAL_MspInit()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal.o(.text._ZN3Hal11HAL_MspInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal::HAL_MspInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::init()
</UL>

<P><STRONG><a name="[161]"></a>Hal::init()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal.o(.text._ZN3Hal4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hal::init() &rArr; HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::HAL_MspInit()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tests::uart_fast()
</UL>

<P><STRONG><a name="[162]"></a>Tim::HAL_TIM_Base_MspInit(TIM_HandleTypeDef*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tim.o(.text._ZN3Tim20HAL_TIM_Base_MspInitEP17TIM_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Tim::HAL_TIM_Base_MspInit(TIM_HandleTypeDef*) &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim::init()
</UL>

<P><STRONG><a name="[164]"></a>Tim::init()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tim.o(.text._ZN3Tim4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Tim::init() &rArr; Tim::HAL_TIM_Base_MspInit(TIM_HandleTypeDef*) &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim::HAL_TIM_Base_MspInit(TIM_HandleTypeDef*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>Sine::fill_memory()</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, wave_1.o(.text._ZN4Sine11fill_memoryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Sine::fill_memory() &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV4Sine)
</UL>
<P><STRONG><a name="[167]"></a>Sine::Sine()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wave_1.o(.text._ZN4SineC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Sine::Sine() &rArr; Wave::set_ptr(float*&) &rArr; __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wave::set_ptr(float*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20e]"></a>Sine::Sine__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wave_1.o(.text._ZN4SineC2Ev), UNUSED)

<P><STRONG><a name="[77]"></a>Sine::~Sine__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4SineD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Sine::~Sine__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV4Sine)
</UL>
<P><STRONG><a name="[168]"></a>Wave::set_ptr(float*&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wave_1.o(.text._ZN4Wave7set_ptrERPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Wave::set_ptr(float*&) &rArr; __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine::Sine()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square::Square()
</UL>

<P><STRONG><a name="[20f]"></a>Wave::Wave__sub_object(Wave&)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveC2ERS_), UNUSED)

<P><STRONG><a name="[210]"></a>Wave::Wave__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveC2Ev), UNUSED)

<P><STRONG><a name="[211]"></a>Sine::~Sine()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveD2Ev), UNUSED)

<P><STRONG><a name="[212]"></a>Sine::~Sine__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveD2Ev), UNUSED)

<P><STRONG><a name="[213]"></a>Wave::~Wave()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveD2Ev), UNUSED)

<P><STRONG><a name="[76]"></a>Wave::~Wave__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveD2Ev))
<BR>[Address Reference Count : 3]<UL><LI> wave_1.o(.rodata._ZTV6Square)
<LI> wave_1.o(.rodata._ZTV4Sine)
<LI> wave_1.o(.rodata._ZTV5Noise)
</UL>
<P><STRONG><a name="[214]"></a>Noise::~Noise()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveD2Ev), UNUSED)

<P><STRONG><a name="[215]"></a>Noise::~Noise__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveD2Ev), UNUSED)

<P><STRONG><a name="[216]"></a>Square::~Square()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveD2Ev), UNUSED)

<P><STRONG><a name="[217]"></a>Square::~Square__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN4WaveD2Ev), UNUSED)

<P><STRONG><a name="[7a]"></a>Noise::fill_memory()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wave_1.o(.text._ZN5Noise11fill_memoryEv))
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV5Noise)
</UL>
<P><STRONG><a name="[218]"></a>Noise::Noise()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wave_1.o(.text._ZN5NoiseC2Ev), UNUSED)

<P><STRONG><a name="[219]"></a>Noise::Noise__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wave_1.o(.text._ZN5NoiseC2Ev), UNUSED)

<P><STRONG><a name="[7b]"></a>Noise::~Noise__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wave_1.o(.text._ZN5NoiseD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Noise::~Noise__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV5Noise)
</UL>
<P><STRONG><a name="[16a]"></a>Tests::uart_fast()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tests.o(.text._ZN5Tests9uart_fastEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Tests::uart_fast() &rArr; Usart_1::init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::init()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_1::receive(unsigned char*, unsigned short)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_1::init()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_1::is_data_ready()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_2_vcom::transmit(unsigned char*, unsigned short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_2_vcom::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>Voice::get_value(unsigned long long)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, voice.o(.text._ZN5Voice9get_valueEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Voice::get_value(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>Voice::Voice(float, const Parameters&, unsigned, const float&)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, voice.o(.text._ZN5VoiceC2EfRK10ParametersjRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Voice::Voice(float, const Parameters&, unsigned, const float&)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameters::Parameters(const Parameters&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21a]"></a>Voice::Voice__sub_object(float, const Parameters&, unsigned, const float&)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, voice.o(.text._ZN5VoiceC2EfRK10ParametersjRKf), UNUSED)

<P><STRONG><a name="[170]"></a>Clocks::SystemClock_Config()</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, clocks.o(.text._ZN6Clocks18SystemClock_ConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Clocks::SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>Filter::next_sample(float)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fitler.o(.text._ZN6Filter11next_sampleEf))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>Filter::Filter(float, float)</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, fitler.o(.text._ZN6FilterC2Eff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Filter::Filter(float, float) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21b]"></a>Filter::Filter__sub_object(float, float)</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, fitler.o(.text._ZN6FilterC2Eff), UNUSED)

<P><STRONG><a name="[7d]"></a>Square::fill_memory()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wave_1.o(.text._ZN6Square11fill_memoryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Square::fill_memory()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV6Square)
</UL>
<P><STRONG><a name="[175]"></a>Square::Square()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wave_1.o(.text._ZN6SquareC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wave::set_ptr(float*&)
</UL>

<P><STRONG><a name="[21c]"></a>Square::Square__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wave_1.o(.text._ZN6SquareC2Ev), UNUSED)

<P><STRONG><a name="[7e]"></a>Square::~Square__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wave_1.o(.text._ZN6SquareD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Square::~Square__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV6Square)
</UL>
<P><STRONG><a name="[16c]"></a>Usart_1::is_data_ready()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart1.o(.text._ZN7Usart_113is_data_readyEv))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tests::uart_fast()
</UL>

<P><STRONG><a name="[16b]"></a>Usart_1::init()</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, usart1.o(.text._ZN7Usart_14initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Usart_1::init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tests::uart_fast()
</UL>

<P><STRONG><a name="[16d]"></a>Usart_1::receive(unsigned char*, unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart1.o(.text._ZN7Usart_17receiveEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Usart_1::receive(unsigned char*, unsigned short) &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tests::uart_fast()
</UL>

<P><STRONG><a name="[9d]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE10saveVFPAsXEv))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[94]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11getFloatRegEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPv3(void*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMX(void*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMD(void*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[95]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11setFloatRegEiy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPv3(void*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMX(void*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMD(void*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[99]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13isSignalFrameEv))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[179]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13stepWithEHABIEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI() &rArr; _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_eht_entry
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()
</UL>

<P><STRONG><a name="[93]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13validFloatRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9a]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getFunctionNameEPcjPj))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[9c]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getRegisterNameEi))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::getRegisterName(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[17c]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)</STRONG> (Thumb, 428 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)
</UL>

<P><STRONG><a name="[9b]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE24setInfoBasedOnIPRegisterEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[96]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE4stepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step() &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI() &rArr; _Unwind_VRS_Interpret &rArr; _Unwind_VRS_Pop &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[91]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6getRegEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[98]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6jumptoEv))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreCoreAndJumpTo()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[92]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6setRegEij))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[97]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE7getInfoEP15unw_proc_info_t))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[90]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE8validRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[8f]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEED0Ev))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[17b]"></a>libunwind::Registers_arm::getRegisterName(int)</STRONG> (Thumb, 916 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind13Registers_arm15getRegisterNameEi))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)
</UL>

<P><STRONG><a name="[17d]"></a>libunwind::Registers_arm::restoreSavedFloatRegisters()</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind13Registers_arm26restoreSavedFloatRegistersEv))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPWithFLDMX(void*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPWithFLDMD(void*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPv3(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()
</UL>

<P><STRONG><a name="[8e]"></a>libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind20AbstractUnwindCursorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[82]"></a>__cxxabiv1::__shim_type_info::noop1() const</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[83]"></a>__cxxabiv1::__shim_type_info::noop2() const</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[85]"></a>__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[86]"></a>__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[87]"></a>__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[183]"></a>__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[84]"></a>__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[185]"></a>__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[186]"></a>__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[188]"></a>__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[89]"></a>__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[8a]"></a>__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 210 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[8b]"></a>__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[189]"></a>__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 328 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
</UL>

<P><STRONG><a name="[8d]"></a>__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
</UL>
<P><STRONG><a name="[187]"></a>__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
</UL>

<P><STRONG><a name="[18a]"></a>__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[78]"></a>Sine::get_value(float) const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wave_1.o(.text._ZNK4Sine9get_valueEf))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wave::get_value_wptr(float*, float) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV4Sine)
</UL>
<P><STRONG><a name="[75]"></a>Wave::get_value_wptr(float*, float) const</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wave_1.o(.text._ZNK4Wave14get_value_wptrEPff))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square::get_value(float) const
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine::get_value(float) const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> wave_1.o(.rodata._ZTV4Wave)
<LI> wave_1.o(.rodata._ZTV6Square)
<LI> wave_1.o(.rodata._ZTV4Sine)
<LI> wave_1.o(.rodata._ZTV5Noise)
</UL>
<P><STRONG><a name="[7c]"></a>Noise::get_value(float) const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wave_1.o(.text._ZNK5Noise9get_valueEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Noise::get_value(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV5Noise)
</UL>
<P><STRONG><a name="[7f]"></a>Square::get_value(float) const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wave_1.o(.text._ZNK6Square9get_valueEf))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wave::get_value_wptr(float*, float) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV6Square)
</UL>
<P><STRONG><a name="[a0]"></a>std::bad_exception::what() const</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt13bad_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[a2]"></a>std::bad_array_new_length::what() const</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt20bad_array_new_length4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[a4]"></a>std::bad_alloc::what() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt9bad_alloc4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[9f]"></a>std::bad_exception::~bad_exception__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt13bad_exceptionD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = std::bad_exception::~bad_exception__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[21d]"></a>std::bad_array_new_length::bad_array_new_length()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthC2Ev), UNUSED)

<P><STRONG><a name="[21e]"></a>std::bad_array_new_length::bad_array_new_length__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthC2Ev), UNUSED)

<P><STRONG><a name="[a1]"></a>std::bad_array_new_length::~bad_array_new_length__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = std::bad_array_new_length::~bad_array_new_length__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[19f]"></a>std::bad_alloc::bad_alloc()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
</UL>

<P><STRONG><a name="[21f]"></a>std::bad_alloc::bad_alloc__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocC2Ev), UNUSED)

<P><STRONG><a name="[a3]"></a>std::bad_alloc::~bad_alloc__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = std::bad_alloc::~bad_alloc__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[70]"></a>std::bad_exception::~bad_exception()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> cxa_personality.cpp.o(.text.__cxa_call_unexpected)
</UL>
<P><STRONG><a name="[220]"></a>std::bad_exception::~bad_exception__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[221]"></a>std::bad_array_new_length::~bad_array_new_length()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[222]"></a>std::bad_array_new_length::~bad_array_new_length__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[6f]"></a>std::bad_alloc::~bad_alloc()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 2]<UL><LI> new.cpp.o(.text._ZnwjSt11align_val_t)
<LI> new.cpp.o(.text._Znwj)
</UL>
<P><STRONG><a name="[223]"></a>std::bad_alloc::~bad_alloc__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[224]"></a>std::exception::~exception()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[9e]"></a>std::exception::~exception__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 3]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[225]"></a>std::type_info::~type_info()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)

<P><STRONG><a name="[13f]"></a>std::type_info::~type_info__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__enum_type_info::~__enum_type_info()
</UL>

<P><STRONG><a name="[18c]"></a>std::unexpected()</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt10unexpectedv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
</UL>

<P><STRONG><a name="[14e]"></a>std::__terminate(void(*)())</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt11__terminatePFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = std::__terminate(void(*)()) &rArr; __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[18d]"></a>std::__unexpected(void(*)())</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt12__unexpectedPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__unexpected(void(*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[1a7]"></a>std::get_terminate()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt13get_terminatev))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[226]"></a>std::set_terminate(void(*)())</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE), UNUSED)

<P><STRONG><a name="[1a8]"></a>std::get_unexpected()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt14get_unexpectedv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[227]"></a>std::set_unexpected(void(*)())</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE), UNUSED)

<P><STRONG><a name="[19d]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
</UL>

<P><STRONG><a name="[228]"></a>std::set_new_handler(void(*)())</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt15set_new_handlerPFvvE), UNUSED)

<P><STRONG><a name="[6e]"></a>std::terminate()</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt9terminatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; std::__terminate(void(*)()) &rArr; __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup_impl
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE)
<LI> cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
</UL>
<P><STRONG><a name="[193]"></a>operator delete[] (void*)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*, unsigned)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[194]"></a>operator delete[] (void*, const std::nothrow_t&)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPvRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[195]"></a>operator delete[] (void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdaPvj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[140]"></a>operator delete (void*)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine::~Sine__deallocating()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square::~Square__deallocating()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise::~Noise__deallocating()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_array_new_length::~bad_array_new_length__deallocating()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, unsigned)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const std::nothrow_t&)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info__deallocating()
</UL>

<P><STRONG><a name="[196]"></a>operator delete (void*, const std::nothrow_t&)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdlPvRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[197]"></a>operator delete (void*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZdlPvj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[169]"></a>operator new[] (unsigned)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; __cxa_allocate_exception &rArr;  __cxa_call_unexpected (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wave::set_ptr(float*&)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[199]"></a>operator new[] (unsigned, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnajRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[19a]"></a>operator new[] (unsigned, std::align_val_t)</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnajSt11align_val_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[19c]"></a>operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnajSt11align_val_tRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[198]"></a>operator new(unsigned)</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned) &rArr; __cxa_allocate_exception &rArr;  __cxa_call_unexpected (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1a1]"></a>operator new(unsigned, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnwjRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[19b]"></a>operator new(unsigned, std::align_val_t)</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnwjSt11align_val_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t)
</UL>

<P><STRONG><a name="[1a2]"></a>operator new(unsigned, std::align_val_t, const std::nothrow_t&)</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, new.cpp.o(.text._ZnwjSt11align_val_tRKSt9nothrow_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr0))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[6b]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr1))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[6c]"></a>__aeabi_unwind_cpp_pr2</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr2))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[190]"></a>__clang_call_terminate</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, new.cpp.o(.text.__clang_call_terminate))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1a3]"></a>__cxa_allocate_dependent_exception</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_allocate_dependent_exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[19e]"></a>__cxa_allocate_exception</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_allocate_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_allocate_exception &rArr;  __cxa_call_unexpected (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
</UL>

<P><STRONG><a name="[14d]"></a>__cxa_begin_catch</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_begin_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wave::set_ptr(float*&)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1a6]"></a>__cxa_begin_cleanup</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_begin_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_cleanup &rArr; __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[1a4]"></a>__cxa_call_unexpected</STRONG> (Thumb, 390 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text.__cxa_call_unexpected))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[150]"></a>__cxa_decrement_exception_refcount</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_decrement_exception_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_decrement_exception_refcount &rArr;  __cxa_call_unexpected (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[18f]"></a>__cxa_end_catch</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_end_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __cxa_end_catch &rArr; __cxxabiv1::__aligned_free_with_fallback(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_DeleteException
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const std::nothrow_t&)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, std::align_val_t, const std::nothrow_t&)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const std::nothrow_t&)
</UL>

<P><STRONG><a name="[1a5]"></a>__cxa_get_globals</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_exception_storage.cpp.o(.text.__cxa_get_globals))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup_impl
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[191]"></a>__cxa_get_globals_fast</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_exception_storage.cpp.o(.text.__cxa_get_globals_fast))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[79]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wave_1.o(.rodata._ZTV4Wave)
</UL>
<P><STRONG><a name="[1a9]"></a>__cxa_rethrow</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_rethrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_rethrow &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[1ab]"></a>__cxa_rethrow_primary_exception</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
</UL>

<P><STRONG><a name="[1a0]"></a>__cxa_throw</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_throw &rArr; _Unwind_RaiseException &rArr; unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, std::align_val_t)
</UL>

<P><STRONG><a name="[184]"></a>__dynamic_cast</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text.__dynamic_cast))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __dynamic_cast &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[1ac]"></a>__gnu_unwind_frame</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__gnu_unwind_frame))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_step
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[73]"></a>__gxx_personality_v0</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text.__gxx_personality_v0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __gxx_personality_v0 &rArr; __cxa_begin_cleanup &rArr; __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_unwind_frame
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)
</UL>
<BR>[Address Reference Count : 13]<UL><LI> main_1.o(.ARM.extab.text.main)
<LI> wave_1.o(.ARM.extab.text._ZN4Wave7set_ptrERPf)
<LI> new.cpp.o(.ARM.extab.text._ZnajRKSt9nothrow_t)
<LI> new.cpp.o(.ARM.extab.text._ZnwjSt11align_val_tRKSt9nothrow_t)
<LI> new.cpp.o(.ARM.extab.text._ZnajSt11align_val_tRKSt9nothrow_t)
<LI> new.cpp.o(.ARM.extab.text._ZnwjRKSt9nothrow_t)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_allocate_exception)
<LI> cxa_personality.cpp.o(.ARM.extab.text.__cxa_call_unexpected)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_cleanup)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_catch)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_decrement_exception_refcount)
<LI> cxa_handlers.cpp.o(.ARM.extab.text._ZSt9terminatev)
<LI> cxa_handlers.cpp.o(.ARM.extab.text._ZSt11__terminatePFvvE)
</UL>
<P><STRONG><a name="[18e]"></a>abort_message</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>

<P><STRONG><a name="[17a]"></a>decode_eht_entry</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.decode_eht_entry))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>

<P><STRONG><a name="[b6]"></a>main</STRONG> (Thumb, 292 bytes, Stack size 248 bytes, main_1.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = main &rArr; Clocks::SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal::init()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim::init()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::Dac(unsigned)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::high()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::low()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dac::set_value_rel(float)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::Filter(float, float)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::next_sample(float)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clocks::SystemClock_Config()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice::Voice(float, const Parameters&, unsigned, const float&)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voice::get_value(unsigned long long)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tests::uart_fast()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine::Sine()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameters::Parameters()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[137]"></a>unw_get_fpreg</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_fpreg))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[12d]"></a>unw_get_proc_info</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_proc_info))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetRegionStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetLanguageSpecificData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[135]"></a>unw_get_reg</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_reg))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[131]"></a>unw_init_local</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_init_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = unw_init_local &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool) &rArr; libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&) &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[13d]"></a>unw_resume</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_resume))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>

<P><STRONG><a name="[136]"></a>unw_save_vfp_as_X</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_save_vfp_as_X))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[13c]"></a>unw_set_fpreg</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_set_fpreg))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>

<P><STRONG><a name="[13a]"></a>unw_set_reg</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_set_reg))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>

<P><STRONG><a name="[155]"></a>unw_step</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_step))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_unwind_frame
</UL>

<P><STRONG><a name="[1b6]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[173]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::Filter(float, float)
</UL>

<P><STRONG><a name="[172]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::Filter(float, float)
</UL>

<P><STRONG><a name="[229]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[174]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::Filter(float, float)
</UL>

<P><STRONG><a name="[22a]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[166]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sine::fill_memory()
</UL>

<P><STRONG><a name="[1b8]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[1b3]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1b7]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[1b2]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1b5]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1b4]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1b1]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[ac]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[22b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[22c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[da]"></a>DMA_SetConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.DMA_SetConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[66]"></a>TIM_DMAPeriodElapsedCplt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_DMAPeriodElapsedCplt))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
</UL>
<P><STRONG><a name="[62]"></a>TIM_DMATriggerCplt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.TIM_DMATriggerCplt))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_tim.o(.text.HAL_TIM_DMABurst_WriteStart)
</UL>
<P><STRONG><a name="[e0]"></a>UART_SetConfig</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[127]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[14c]"></a>_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[72]"></a>_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block &rArr; std::__terminate(void(*)()) &rArr; __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_exception.cpp.o(.text.__cxa_throw)
</UL>
<P><STRONG><a name="[71]"></a>_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block &rArr; std::__terminate(void(*)()) &rArr; __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception)
</UL>
<P><STRONG><a name="[a5]"></a>__cxa_end_cleanup_impl</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_end_cleanup_impl), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __cxa_end_cleanup_impl &rArr; std::terminate() &rArr; std::__terminate(void(*)()) &rArr; __cxa_begin_catch &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[147]"></a>_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context</STRONG> (Thumb, 928 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context &rArr; _Unwind_VRS_Get &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetRegionStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetLanguageSpecificData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[14f]"></a>_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE &rArr; _Unwind_VRS_Set &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[14a]"></a>_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[149]"></a>_ZN10__cxxabiv1L18readEncodedPointerEPPKhh</STRONG> (Thumb, 310 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L18readEncodedPointerEPPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L18readEncodedPointerEPPKhh &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[14b]"></a>_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[132]"></a>_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_resume
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[154]"></a>&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._ZN12_GLOBAL__N_114unwindOneFrameEjP21_Unwind_Control_BlockP15_Unwind_Context))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_step
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr0
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr2
</UL>

<P><STRONG><a name="[142]"></a>&lang;unnamed namespace 1&rang;::fallback_free(void*)</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN12_GLOBAL__N_113fallback_freeEPv))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__free_with_fallback(void*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
</UL>

<P><STRONG><a name="[144]"></a>&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN12_GLOBAL__N_115fallback_mallocEj))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
